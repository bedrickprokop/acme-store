apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.acmestore"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        mock {
            dimension "version"
            applicationIdSuffix = ".mock"
            versionNameSuffix "-mock"
        }
        prod {
            dimension "version"
        }
    }

    // Remove mockRelease buildType as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true);
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src/main/res_themes']
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
        }
        test { java.srcDirs = ['src/test/java', 'src/test/kotlin'] }
        mock { java.srcDirs = ['src/mock/java', 'src/mock/kotlin'] }
        prod { java.srcDirs = ['src/prod/java', 'src/prod/kotlin'] }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true
        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {

    // LIBS
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':commons')

    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
    implementation 'androidx.core:core-ktx:1.6.0'

    // ANDROIDX
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation "androidx.constraintlayout:constraintlayout:2.1.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.5"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.5"

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

    // RETROFIT
    mockImplementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    mockImplementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    mockImplementation "com.squareup.okhttp3:okhttp:4.9.1"

    // Used for test with fragment scenario - debugImplementation is used here so that the empty
    // activity that FragmentScenario relies on is accessible by the test target process
    debugImplementation "androidx.fragment:fragment-testing:1.3.6"

    // UNIT TESTS
    testImplementation "junit:junit:$versions.junit"
    testImplementation 'org.robolectric:robolectric:4.5.1'

    // To import InstantTaskExecutorRule - execute postValues from livedata instantly
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    // Implement this library prevent from: Could not initialize plugin: interface org.mockito.plugins.MockMaker
    // Upgrading this version cause the above crash - weird
    testImplementation "org.mockito:mockito-android:2.19.0"


    // TODO https://developer.android.com/guide/fragments/test#kts
    // Core library
    testImplementation('androidx.test:core:1.4.0')
    // AndroidJUnitRunner and JUnit Rules
    testImplementation('androidx.test:runner:1.4.0')
    testImplementation('androidx.test:rules:1.4.0')
    // Assertions
    testImplementation('androidx.test.ext:junit:1.1.3')
    testImplementation('androidx.test.ext:truth:1.4.0')
    testImplementation('com.google.truth:truth:1.0.1')
    // Espresso dependencies
    testImplementation('androidx.test.espresso:espresso-core:3.4.0')
    /*testImplementation('androidx.test.espresso:espresso-contrib:3.4.0')
    testImplementation('androidx.test.espresso:espresso-intents:3.4.0')
    testImplementation('androidx.test.espresso:espresso-accessibility:3.4.0')
    testImplementation('androidx.test.espresso:espresso-web:3.4.0')
    testImplementation('androidx.test.espresso.idling:idling-concurrent:3.4.0')*/
}